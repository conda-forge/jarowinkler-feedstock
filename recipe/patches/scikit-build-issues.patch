diff --git a/setup.py b/setup.py
index 33c7a1a..6fe9042 100644
--- a/setup.py
+++ b/setup.py
@@ -1,4 +1,8 @@
 import os
+import sys
+import rapidfuzz_capi
+from setuptools import setup, Extension
+from setuptools.command.build_ext import build_ext
 
 def show_message(*lines):
     print("=" * 74)
@@ -9,6 +13,50 @@ def show_message(*lines):
 with open('README.md', 'rt', encoding="utf8") as f:
     readme = f.read()
 
+class BuildExt(build_ext):
+    """A custom build extension for adding compiler-specific options."""
+    c_opts = {
+        'msvc': ['/EHsc', '/std:c++17', '/O2', '/W4', '/DNDEBUG'],
+        'unix': ['-O3', '-std=c++17', '-Wextra', '-Wall', '-Wconversion', '-g0', '-DNDEBUG'],
+    }
+    l_opts = {
+        'msvc': [],
+        'unix': [],
+    }
+
+    if sys.platform == 'darwin':
+        darwin_opts = ['-stdlib=libc++', '-mmacosx-version-min=10.9']
+        c_opts['unix'] += darwin_opts
+        l_opts['unix'] += darwin_opts
+    else:
+        linux_opts = ['-pthread']
+        c_opts['unix'] += linux_opts
+        l_opts['unix'] += linux_opts
+
+    def build_extensions(self):
+        ct = self.compiler.compiler_type
+        opts = self.c_opts.get(ct, [])
+        link_opts = self.l_opts.get(ct, [])
+        if ct == 'unix':
+            opts.append('-DVERSION_INFO="%s"' % self.distribution.get_version())
+        elif ct == 'msvc':
+            opts.append('/DVERSION_INFO=\\"%s\\"' % self.distribution.get_version())
+        for ext in self.extensions:
+            ext.extra_compile_args += opts
+            ext.extra_link_args += link_opts
+        build_ext.build_extensions(self)
+
+ext_modules = [
+    Extension(
+       name='jarowinkler._initialize_cpp',
+        sources=[
+            'src/jarowinkler/_initialize_cpp.cxx'
+        ],
+        include_dirs=["extern/jarowinkler-cpp/", rapidfuzz_capi.get_include()],
+        language='c++',
+    ),
+]
+
 setup_args = {
     "name": "jarowinkler",
     "version": "1.2.1",
@@ -38,17 +86,12 @@ setup_args = {
 
 def run_setup(with_binary):
     if with_binary:
-        from skbuild import setup
-        import rapidfuzz_capi
-
         setup(
             **setup_args,
-            cmake_args=[
-                f'-DRF_CAPI_PATH:STRING={rapidfuzz_capi.get_include()}'
-            ]
+            cmdclass={'build_ext': BuildExt},
+            ext_modules = ext_modules
         )
     else:
-        from setuptools import setup
         setup(**setup_args)
 
 # when packaging only build wheels which include the C extension
